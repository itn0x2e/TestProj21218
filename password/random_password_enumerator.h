#ifndef __RANDOM_PASSWORD_ENUMERATOR_H__
#define __RANDOM_PASSWORD_ENUMERATOR_H__

#include "password_enumerator.h"

/**
 * A variation of password enumerator which enumerates passwords generated
 * using a pseudo-random generator index in each iteration.
 */
typedef struct randomPasswordEnumerator_s {
	passwordEnumerator_t super;

	/* The number of passwords available by the wrapped password generator */
	ulong_t generatorSize;
} randomPasswordEnumerator_t;

/**
 * An initialization function.
 *
 * @param self		The random password enumerator to initialize
 * @param generator	The wrapped password generator
 * @param password	A buffer into which passwords should be written
 * @param iterations	The number of iterations to perform
 *
 * @pre		self != NULL
 * @pre		generator != NULL
 * @pre		The wrapped password generator is valid and initialized.
 * @pre		The buffer supplied is large enough to contain, including a
 * 		terminating null, any password generated by the generator.
 */
void randomPasswordEnumeratorInitialize(randomPasswordEnumerator_t * self,
					const passwordGenerator_t * generator,
					char * password,
					ulong_t iterations);

#endif /* __RANDOM_PASSWORD_ENUMERATOR_H__ */
