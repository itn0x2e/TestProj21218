#ifndef __RULE_SEGMENT_H__
#define __RULE_SEGMENT_H__

#include "../common/types.h"
#include "dictionary.h"
#include "password_part_generator.h"

#define RULE_SEGMENT_RULE_TOKENS "?&!%@#$"

/**
 * A random-access generator of passwords which apply to a single rule
 * segment.
 *
 * Rule segments are separated in the syntax  by the delimiter '|'.
 */
typedef struct ruleSegment_s {
	/* The generators of parts of the passwords in the segment */
	passwordPartGenerator_t ** passwordPartGenerators;
	
	/* The number of rule password part generators */
	uint_t numPasswordPartGenerators;
	
	/* The total number of valid password indexes */
	ulong_t size;
	
	/* The length of the longest password, not including the terminating null */
	ulong_t maxPasswordLength;
} ruleSegment_t;

/**
 * Initialization function.
 *
 * @param	self	The rule segment to initialize
 * @param	ruleSegmentStr	A string representation of the rule segment
 * @param	dictionary	The dictionary to use whenever specified by the rule
 *
 * @pre		self != NULL
 * @pre		rule has a valid syntax
 * @pre		dictionary != NULL
 * @pre		dictionary is initialized
 *
 * @return 	TRUE upon success, otherwise FALSE.
 *
 * @note	Avoid invoking the finalization function if the return value is FALSE.
 */
bool_t ruleSegmentInitialize(ruleSegment_t * self,
			     const char * ruleSegmentStr,
			     const dictionary_t * dictionary);
			     
/**
 * Finalization function.
 *
 * @param 	self	The rule segment to finalize
 * @pre		self != NULL
 * @pre		self is initialized.
 */
void ruleSegmentFinalize(ruleSegment_t * self);

/**
 * @param 	self	A rule segment
 * @pre		self != NULL
 * @pre		self is initialized.
 *
 * @return	The total number of valid password indexes
 */
ulong_t ruleSegmentGetSize(const ruleSegment_t * self);

/**
 * @param	self	A rule segment
 * @pre		self != NULL
 * @pre		self is initialized.
 *
 * @return	The length of the longest password, not including the terminating null
 */
ulong_t ruleSegmentGetMaxLength(const ruleSegment_t * self);

/**
 * Calculates the password in a specified index and stores it into a specified
 * buffer.
 *
 * @param	self	A rule segment
 * @param	index	The index
 * @param	buf	A buffer into which to write the corresponding password
 *
 * @pre		self != NULL
 * @pre		self is initialized.
 * @pre		index < ruleSegmentGetSize(self)
 * @pre		buf != NULL
 * @pre		buf is large enough to contain, including a terminating null, any
 * 		password generated by the rule segment.
 */
void ruleSegmentCalculatePassword(const ruleSegment_t * self, ulong_t index, char * buf);

#endif /*__RULE_SEGMENT_H__*/
