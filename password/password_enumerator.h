#ifndef __PASSWORD_ENUMERATOR_H__
#define __PASSWORD_ENUMERATOR_H__

#include "../common/types.h"
#include "password_generator.h"

/* Forward declaration */
struct passwordEnumerator_s;

/**
 * A pointer to a function which, given a password enumerator, returns the
 * password generator index for the next password to be generated.
 */
typedef ulong_t (* getGeneratorIndexFuncPtr_t) (const struct passwordEnumerator_s * self);

/**
 * A wrapper of password generator which supplies an iterator for enumeration
 * over generated passwords.
 */
typedef struct passwordEnumerator_s {
	/* The wrapped password generator */
	const passwordGenerator_t * generator;

	/* A buffer into which passwords are written */
	char * password;

	/* The number of times to enumerate */
	ulong_t iterations;

	/* The number of iterations already made */
	ulong_t index;

	/* A pointer to a function which, returns the password generator index for
	 * the next password to be generated */
	getGeneratorIndexFuncPtr_t getGeneratorIndexFunc;
} passwordEnumerator_t;

/**
 * An initialization function.
 *
 * @param	self		The password enumerator to initialize
 * @param	generator	The wrapped password generator
 * @param	password	A buffer into which passwords should be written
 * @param	iterations	The number of iterations to perform
 * @param	getGeneratorIndexFunc	A pointer to a function which, returns the
 * 									password generator index for the next password
 * 									to be generated
 *
 * @pre		self != NULL
 * @pre		generator != NULL
 * @pre		The wrapped password generator is valid and initialized.
 * @pre		The buffer supplied is large enough to contain, including a
 * 			terminating null, any password generated by the generator.
 * @pre		getGeneratorIndexFunc != NULL
 */
void passwordEnumeratorInitialize(passwordEnumerator_t * self,
								  const passwordGenerator_t * generator,
								  char * password,
								  ulong_t iterations,
								  getGeneratorIndexFuncPtr_t getGeneratorIndexFunc);

/**
 * Updates the buffer supplied to contain the next password, null terminated.
 *
 * @param	self	The password enumerator
 * @pre		self != NULL
 * @pre		self is valid and initialized
 *
 * @ret		TRUE if the password has been updated,
 * 			FALSE if enumeration is already finished and the password has not
 * 			been updated
 */
bool_t passwordEnumeratorCalculateNextPassword(passwordEnumerator_t* self);

#endif /* __PASSWORD_ENUMERATOR_H__ */
