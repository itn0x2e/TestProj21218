#ifndef __RAINBOW_TABLE_H__
#define __RAINBOW_TABLE_H__

#include "../common/types.h"
#include "../common/misc.h"
#include "../password/password_enumerator.h"
#include "../password/password_generator.h"
#include "../DEHT/DEHT.h"

typedef LONG_INDEX_PROJ RainbowSeed_t;

/* data stored inside DEHT's user bytes */
typedef struct RainbowTableConfig_s {
	ulong_t chainLength;
	RainbowSeed_t seeds[1];
} RainbowTableConfig_t;

/* instance */
typedef struct RainbowTable_s {
	DEHT * hashTable;
	RainbowTableConfig_t * config;
	BasicHashFunctionPtr hashFunc;
	const passwordGenerator_t * passGenerator;
	char * password;
	ulong_t passwordLength;
} RainbowTable_t;


ulong_t getConfigSize(ulong_t chainLength);

/**
* Build a Rainbow Table according to the specified parameters. This is only a creation interface
* for queries, see RT_open() & RT_query().
* Function desc: This function will generate a new Rainbow Table as per the user's request and
*		 save it to disk. The table can then be opened using RT_open() and queried using
*		 RT_query() (and closed with RT_close())
*
* @param passwordEnumerator - a password enumerator over the password space. Expected to be a random
*			      password enumerator over the password range, of about 10 * the actual
*			      range (to increase likelihood of a hit for queries)
* @param passwordGenerator - a password generator (random access to the entire password range)
* @param enumeratorPassword - the buffer associated with the password enumerator
* @param generatorPassword - the buffer associated with the password generator
* @param hashFunc - valid pointer the one of the hash function (SHA-1 / MD-5)
* @param rainbowChainLen - length of the rainbow-chains
* @param hashTableFilePrefix - file prefix for DEHT hash table files. files are generated
*			       for hashTableFilePrefix.key and hashTableFilePrefix.data
* @param nHashTableEntries - number of buckets in the hash table. This may require some 
*			     tuning to get decent performance.
*			  performance.
* @param nPairsPerBlock - number of key<->data pairs to store in each disk block in the 
*			  hash table. This may require some tuning to get decent performance.
*
* @ret TRUE on success, FALSE otherwise.
*
*/
bool_t RT_generate(passwordEnumerator_t * passwordEnumerator,
		   const passwordGenerator_t * passwordGenerator,
		   char * enumeratorPassword,
		   char * generatorPassword,
		   BasicHashFunctionPtr hashFunc,
		   ulong_t rainbowChainLen,
		   const char * hashTableFilePrefix,
		   ulong_t nHashTableEntries,
		   ulong_t nPairsPerBlock);

/**
* Open an existing rainbow table for querying
* Function desc: This function will open a valid existing Rainbow Table previously created using
*		 RT_generate().  The returned object can then be queried using RT_query() 
*		 (and closed with RT_close())
*
* @param passwordGenerator - a password generator (random access to the entire password range)
* @param password - the buffer associated with the password generator
* @param passwordLength - maximum length for the passwords generated by the generator
* @param hashTableFilePrefix - file prefix for DEHT hash table files. files are generated
*			       for hashTableFilePrefix.key and hashTableFilePrefix.data
* @param nHashTableEntries - number of buckets in the hash table. This may require some 
*			     tuning to get decent performance.
*			  performance.
* @param nPairsPerBlock - number of key<->data pairs to store in each disk block in the 
*			  hash table. This may require some tuning to get decent performance.
*
* @ret TRUE on success, FALSE otherwise.
*
*/
RainbowTable_t * RT_open(const passwordGenerator_t * passGenerator,
			 char * password,
			 ulong_t passwordLength,
			 const char * hashTableFilePrefix);

void RT_close(RainbowTable_t * self);

bool_t RT_query(RainbowTable_t * self, const byte_t * hash, ulong_t hashLen, bool_t * found);


bool_t RT_print(FILE * seedsAndPasswordsFd,
		FILE * chainsFd,

		const passwordGenerator_t * passGenerator,
		char * generatorPassword,
		ulong_t passwordMaxLen,
		const char * hashTableFilePrefix);

#endif /* __RAINBOW_TABLE_H__ */
